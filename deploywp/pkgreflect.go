// Code generated by github.com/newclarity/PackageReflect DO NOT EDIT.

package deploywp

import "reflect"

var Types = map[string]reflect.Type{
	"Build": reflect.TypeOf((*Build)(nil)).Elem(),
	"Defaults": reflect.TypeOf((*Defaults)(nil)).Elem(),
	"DefaultsPaths": reflect.TypeOf((*DefaultsPaths)(nil)).Elem(),
	"DefaultsRepository": reflect.TypeOf((*DefaultsRepository)(nil)).Elem(),
	"DeployWpGetter": reflect.TypeOf((*DeployWpGetter)(nil)).Elem(),
	"Files": reflect.TypeOf((*Files)(nil)).Elem(),
	"FilesArray": reflect.TypeOf((*FilesArray)(nil)).Elem(),
	"Host": reflect.TypeOf((*Host)(nil)).Elem(),
	"Hosts": reflect.TypeOf((*Hosts)(nil)).Elem(),
	"Meta": reflect.TypeOf((*Meta)(nil)).Elem(),
	"Paths": reflect.TypeOf((*Paths)(nil)).Elem(),
	"Provider": reflect.TypeOf((*Provider)(nil)).Elem(),
	"Providers": reflect.TypeOf((*Providers)(nil)).Elem(),
	"Repository": reflect.TypeOf((*Repository)(nil)).Elem(),
	"Revision": reflect.TypeOf((*Revision)(nil)).Elem(),
	"Source": reflect.TypeOf((*Source)(nil)).Elem(),
	"State": reflect.TypeOf((*State)(nil)).Elem(),
	"String": reflect.TypeOf((*String)(nil)).Elem(),
	"Target": reflect.TypeOf((*Target)(nil)).Elem(),
	"TargetRevision": reflect.TypeOf((*TargetRevision)(nil)).Elem(),
	"TargetRevisions": reflect.TypeOf((*TargetRevisions)(nil)).Elem(),
	"ToolDeployWp": reflect.TypeOf((*ToolDeployWp)(nil)).Elem(),
	"TypeDeployWp": reflect.TypeOf((*TypeDeployWp)(nil)).Elem(),
	"URL": reflect.TypeOf((*URL)(nil)).Elem(),
	"Wordpress": reflect.TypeOf((*Wordpress)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"GetStructTag": reflect.ValueOf(GetStructTag),
	"IsValidVersionType": reflect.ValueOf(IsValidVersionType),
	"ReflectDeployWp": reflect.ValueOf(ReflectDeployWp),
	"ToolBuildDeployWp": reflect.ValueOf(ToolBuildDeployWp),
	"ToolLoadDeployWp": reflect.ValueOf(ToolLoadDeployWp),
}

var Variables = map[string]reflect.Value{
	"GetTools": reflect.ValueOf(&GetTools),
}

var Consts = map[string]reflect.Value{
	"DefaultSourceBasePath": reflect.ValueOf(DefaultSourceBasePath),
	"TargetActionCopy": reflect.ValueOf(TargetActionCopy),
	"TargetActionDelete": reflect.ValueOf(TargetActionDelete),
	"TargetActionExclude": reflect.ValueOf(TargetActionExclude),
	"TargetActionKeep": reflect.ValueOf(TargetActionKeep),
	"ToolPrefix": reflect.ValueOf(ToolPrefix),
}

